---
export interface Props {
  title?: string;
  showForPrint?: boolean;
}
const { title = "", showForPrint = false } = Astro.props;
---

<!-- https://xkonti.tech/blog/astro-mermaid-mdx/ --><!-- https://mermaid.js.org/syntax/flowchart.html -->
<script>
  import mermaid from "mermaid";

  mermaid.initialize({
    startOnLoad: false,
    theme: "neutral",
    fontFamily: "inherit",
    fontSize: 14,
  });

  function waitForLowNetworkActivity(maxConnections = 2, stableTime = 500) {
    return new Promise((resolve) => {
      // Simulate a fluctuating number of network connections
      let activeConnections = 5; // Starting with more than 2 connections
      let stableStart: number | null = null; // Tracks when stability begins

      // Function to simulate network activity decreasing over time
      const checkConnections = () => {
        // Randomly decrease connections to simulate activity winding down
        if (Math.random() > 0.7 && activeConnections > 0) {
          activeConnections--;
          // console.log(`Connections dropped to: ${activeConnections}`);
        }

        // Check if condition is met
        if (activeConnections <= maxConnections) {
          if (!stableStart) {
            stableStart = Date.now(); // Mark when stability started
          } else if (Date.now() - stableStart >= stableTime) {
            // console.log(
            //   `Stable with ${activeConnections} connections for ${stableTime}ms`
            // );
            resolve(`Network stable with ${activeConnections} connections`);
            return; // Exit the interval
          }
        } else {
          stableStart = null; // Reset if connections go above threshold
        }

        // console.log(`Current connections: ${activeConnections}`);
      };

      // Poll every 100ms to simulate checking network status
      const interval = setInterval(checkConnections, 100);

      // Optional: Stop after a timeout to avoid infinite loops (e.g., 10 seconds)
      setTimeout(() => {
        clearInterval(interval);
        resolve("Timed out waiting for stable network");
      }, 4000);
    });
  }

  function extractMermaidCode() {
    // Find all mermaid components
    const mermaidElements = document.querySelectorAll(
      "figure.expandable-diagram"
    );
    mermaidElements.forEach((element) => {
      // Find the `copy` button for each component
      const copyButton = element.querySelector(".copy button");
      // Check if copyButton exists before accessing its properties
      if (!copyButton) return;
      // Extract the code from the `data-code` attribute
      let code = (copyButton as HTMLButtonElement).dataset.code || "";
      // Replace the U+007f character with `\n` to simulate new lines
      code = code.replace(/\u007F/g, "\n");
      // Construct the `pre` element for the diagram code
      const preElement = document.createElement("pre");
      preElement.className =
        "mermaid not-prose flex justify-center items-center rounded bg-gray-50";
      preElement.innerHTML = code;
      // Find the diagram content container and override it's content
      const diagramContainer = element.querySelector(".diagram-content");
      if (diagramContainer && diagramContainer.firstChild) {
        diagramContainer.replaceChild(preElement, diagramContainer.firstChild);
      } else if (diagramContainer) {
        diagramContainer.appendChild(preElement);
      }
    });
  }
  
  // console.log("Waiting for network to stabilize...");
  waitForLowNetworkActivity(2, 500)
    .then((result) => {
      console.log(result);
    })
    .catch((error) => {
      console.error(error);
    });

  // Wait for the DOM to be fully loaded
  document.addEventListener("DOMContentLoaded", async () => {
    // console.log("DOM fully loaded and parsed");
    extractMermaidCode();
    // console.log("Running mermaid...");
    mermaid.run();
  });
</script>

<figure class="expandable-diagram">
  <figcaption class={`${showForPrint ? "print:block" : "print:hidden"}`}>
    {title}
  </figcaption>

  <div
    class={`diagram-content ${showForPrint ? "print:block" : "print:hidden"}`}
  >
    Loading diagram...
  </div>

  <details class="text-sm print:hidden">
    <summary>Source</summary>
    <slot />
  </details>
</figure>
<div class={`${showForPrint ? "hidden" : "print:block"} hidden italic`}>
  The flowchart is not printed to PDF. Consult the handbook to see it.
</div>
